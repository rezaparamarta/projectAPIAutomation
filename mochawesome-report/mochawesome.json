{
  "stats": {
    "suites": 5,
    "tests": 12,
    "passes": 12,
    "pending": 0,
    "failures": 0,
    "start": "2024-08-11T15:34:51.131Z",
    "end": "2024-08-11T15:34:57.348Z",
    "duration": 6217,
    "testsRegistered": 12,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "f29ec987-b0aa-434c-9668-bf9ffbad11a5",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "9b03654f-3eb9-4ef6-8b8c-d84ffa0ba7cd",
          "title": "API Testing",
          "fullFile": "D:\\DigitalSkola\\TugasAPIautomationDigitalSkolaBatch5\\reqresTest\\cobajsonSchema.js",
          "file": "\\reqresTest\\cobajsonSchema.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "This must return status code of 200",
              "fullTitle": "API Testing This must return status code of 200",
              "timedOut": false,
              "duration": 234,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request.get('/api/users?page=2');  \nexpect(response.status).to.equal(200);",
              "err": {},
              "uuid": "13a69375-bfe8-42d7-947f-8e17a84919c9",
              "parentUUID": "9b03654f-3eb9-4ef6-8b8c-d84ffa0ba7cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "This assertion must validate defined JSON schema",
              "fullTitle": "API Testing This assertion must validate defined JSON schema",
              "timedOut": false,
              "duration": 160,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request.get('/api/users?page=2');  \nexpect(response.body).to.be.jsonSchema(definedSchema);",
              "err": {},
              "uuid": "c44e5b2c-87d9-4108-add9-a1cb6aeb17c5",
              "parentUUID": "9b03654f-3eb9-4ef6-8b8c-d84ffa0ba7cd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "13a69375-bfe8-42d7-947f-8e17a84919c9",
            "c44e5b2c-87d9-4108-add9-a1cb6aeb17c5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 394,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5809134d-0e70-4e7b-8e8c-8ae0b616916b",
          "title": "This is unit test API for check jsonSchema and Assertion",
          "fullFile": "D:\\DigitalSkola\\TugasAPIautomationDigitalSkolaBatch5\\reqresTest\\createUser.js",
          "file": "\\reqresTest\\createUser.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "This must return status code of 201",
              "fullTitle": "This is unit test API for check jsonSchema and Assertion This must return status code of 201",
              "timedOut": false,
              "duration": 696,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request.post('/api/users')\n    .set('Content-Type', 'application/json')\n    .send({\n        \"name\": \"morpheus\",\n        \"job\": \"leader\"\n    });\nexpect(response.status).to.equal(201);",
              "err": {},
              "uuid": "885f0677-dc7d-4484-993b-5089118a35aa",
              "parentUUID": "5809134d-0e70-4e7b-8e8c-8ae0b616916b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "This assertion must validate defined JSON schema",
              "fullTitle": "This is unit test API for check jsonSchema and Assertion This assertion must validate defined JSON schema",
              "timedOut": false,
              "duration": 641,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request.post('/api/users')\n    .set('Content-Type', 'application/json')\n    .send({\n        \"name\": \"morpheus\",\n        \"job\": \"leader\"\n    });\nexpect(response.body).to.be.jsonSchema(jsonSchema);",
              "err": {},
              "uuid": "043afd92-e1e9-4216-91bf-e70e1531e204",
              "parentUUID": "5809134d-0e70-4e7b-8e8c-8ae0b616916b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Return Id, name, job and createdAt",
              "fullTitle": "This is unit test API for check jsonSchema and Assertion Return Id, name, job and createdAt",
              "timedOut": false,
              "duration": 916,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request.post('/api/users')\n    .set('Content-Type', 'application/json')\n    .send({\n        \"name\": \"morpheus\",\n        \"job\": \"leader\"\n    });\nconsole.log('Status Respons:', response.status);\nconsole.log('Body Respons:', response.body);\n\n// Assertion for make sure that response include these type and value\nexpect(response.body).to.have.property('name', 'morpheus');\nexpect(response.body).to.have.property('job', 'leader');\nexpect(response.body).to.have.property('id');\nexpect(response.body).to.have.property('createdAt');\n\n// Assertion for checking id and createdAt\nexpect(response.body.id).to.be.a('string');\nexpect(response.body.createdAt).to.be.a('string');",
              "err": {},
              "uuid": "bc4a1538-eeb4-4cf8-a6cd-37c57b81e80c",
              "parentUUID": "5809134d-0e70-4e7b-8e8c-8ae0b616916b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "885f0677-dc7d-4484-993b-5089118a35aa",
            "043afd92-e1e9-4216-91bf-e70e1531e204",
            "bc4a1538-eeb4-4cf8-a6cd-37c57b81e80c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2253,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "333d19d4-1207-4c37-8d87-ab941f768bcc",
          "title": "Unit Test API untuk Memeriksa Testing Assertion",
          "fullFile": "D:\\DigitalSkola\\TugasAPIautomationDigitalSkolaBatch5\\reqresTest\\deleteUser.js",
          "file": "\\reqresTest\\deleteUser.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Return response code with 204",
              "fullTitle": "Unit Test API untuk Memeriksa Testing Assertion Return response code with 204",
              "timedOut": false,
              "duration": 525,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request.delete('/api/users/2').set('Content-Type', 'application/json');\nexpect(response.status).to.equal(204);\nconsole.log('Status Respons:', response.status);",
              "err": {},
              "uuid": "08c9d2d8-47e5-49fd-81f3-743b267ab726",
              "parentUUID": "333d19d4-1207-4c37-8d87-ab941f768bcc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "08c9d2d8-47e5-49fd-81f3-743b267ab726"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 525,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e069de13-9a41-40f5-a018-5cd3f35113c1",
          "title": "Unit Test API untuk Memeriksa JSON Schema and Testing Assertion",
          "fullFile": "D:\\DigitalSkola\\TugasAPIautomationDigitalSkolaBatch5\\reqresTest\\singleUser.js",
          "file": "\\reqresTest\\singleUser.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "This must return status code of 200",
              "fullTitle": "Unit Test API untuk Memeriksa JSON Schema and Testing Assertion This must return status code of 200",
              "timedOut": false,
              "duration": 100,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request.get('/api/users/2');  // Ganti dengan endpoint API yang sesuai\nexpect(response.status).to.equal(200);",
              "err": {},
              "uuid": "c664ffc2-5261-4395-8f05-f448a1348ebd",
              "parentUUID": "e069de13-9a41-40f5-a018-5cd3f35113c1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "This assertion must validate defined JSON schema",
              "fullTitle": "Unit Test API untuk Memeriksa JSON Schema and Testing Assertion This assertion must validate defined JSON schema",
              "timedOut": false,
              "duration": 134,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request.get('/api/users/2');  // Ganti dengan endpoint API yang sesuai\nexpect(response.body).to.be.jsonSchema(definedSchema);",
              "err": {},
              "uuid": "55d5d468-4389-40f7-ad0d-a9012692ab48",
              "parentUUID": "e069de13-9a41-40f5-a018-5cd3f35113c1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Mengembalikan Data yang Benar untuk User dengan ID 2",
              "fullTitle": "Unit Test API untuk Memeriksa JSON Schema and Testing Assertion Mengembalikan Data yang Benar untuk User dengan ID 2",
              "timedOut": false,
              "duration": 111,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request.get('/api/users/2').set('Content-Type', 'application/json');\nexpect(response.status).to.equal(200);\nexpect(response.body.data.id).to.equal(2);\nexpect(response.body.data.email).to.equal(\"janet.weaver@reqres.in\");\nconsole.log('Status Respons:', response.status);\nconsole.log('Body Respons:', response.body);",
              "err": {},
              "uuid": "81fe243b-cf56-4037-9bac-fcf8e9ca4c67",
              "parentUUID": "e069de13-9a41-40f5-a018-5cd3f35113c1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c664ffc2-5261-4395-8f05-f448a1348ebd",
            "55d5d468-4389-40f7-ad0d-a9012692ab48",
            "81fe243b-cf56-4037-9bac-fcf8e9ca4c67"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 345,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0e175972-43cf-44fa-80af-56a0452fae6c",
          "title": "This is unit test API for check jsonSchema and Assertion",
          "fullFile": "D:\\DigitalSkola\\TugasAPIautomationDigitalSkolaBatch5\\reqresTest\\updateUser.js",
          "file": "\\reqresTest\\updateUser.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "This must return status code of 200",
              "fullTitle": "This is unit test API for check jsonSchema and Assertion This must return status code of 200",
              "timedOut": false,
              "duration": 767,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request.put('/api/users/2')\n    .set('Content-Type', 'application/json')\n    .send({\n        \"name\": \"Reza Paramarta\",\n        \"job\": \"Software Engineer in Test\"\n    });\nexpect(response.status).to.equal(200);",
              "err": {},
              "uuid": "c226e3aa-6594-42cd-aa2d-8179abea0279",
              "parentUUID": "0e175972-43cf-44fa-80af-56a0452fae6c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "This assertion must validate defined JSON schema",
              "fullTitle": "This is unit test API for check jsonSchema and Assertion This assertion must validate defined JSON schema",
              "timedOut": false,
              "duration": 639,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request.put('/api/users/2')\n    .set('Content-Type', 'application/json')\n    .send({\n        \"name\": \"Reza Paramarta\",\n        \"job\": \"Software Engineer in Test\"\n    });\nexpect(response.body).to.be.jsonSchema(jsonSchema);",
              "err": {},
              "uuid": "ddeaee27-62b2-418d-b39b-2713a0ca8316",
              "parentUUID": "0e175972-43cf-44fa-80af-56a0452fae6c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Return name, job and updatedAt",
              "fullTitle": "This is unit test API for check jsonSchema and Assertion Return name, job and updatedAt",
              "timedOut": false,
              "duration": 1281,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request.put('/api/users/2')\n    .set('Content-Type', 'application/json')\n    .send({\n        \"name\": \"Reza Paramarta\",\n        \"job\": \"Software Engineer in Test\"\n    });\nconsole.log('Status Respons:', response.status);\nconsole.log('Body Respons:', response.body);\n\n// Assertion for make sure that response include these type and value\nexpect(response.body).to.have.property('name', 'Reza Paramarta');\nexpect(response.body).to.have.property('job', 'Software Engineer in Test');\nexpect(response.body).to.have.property('updatedAt');\n\n// Assertion for checking updatedAt\nexpect(response.body.updatedAt).to.be.a('string');",
              "err": {},
              "uuid": "eace87d1-b138-422d-856c-378e0753e04b",
              "parentUUID": "0e175972-43cf-44fa-80af-56a0452fae6c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c226e3aa-6594-42cd-aa2d-8179abea0279",
            "ddeaee27-62b2-418d-b39b-2713a0ca8316",
            "eace87d1-b138-422d-856c-378e0753e04b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2687,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}